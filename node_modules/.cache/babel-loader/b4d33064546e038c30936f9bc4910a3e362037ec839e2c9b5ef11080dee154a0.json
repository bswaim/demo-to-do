{"ast":null,"code":"import React,{useEffect,useState}from'react';import{addNewItemToList,changeCheckedState,changeEditMode,checkItem,deleteItem,moveCurrentState,unCheckItem,updateItemText,updateLatestChangeToDoHistory}from\"../../utils/utils\";import{find,isEmpty}from\"lodash\";import classNames from\"classnames\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faCircleMinus}from\"@fortawesome/free-solid-svg-icons\";// import {updateLatestChangeToDoHistory} from \"../../redux/actions\";\n// import {useDispatch} from \"react-redux\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ListItem(_ref){var _find;let{checked,editMode,id,listHistoryState,setListHistoryState,text=''}=_ref;const copyOfList=listHistoryState.slice();const currentListView=((_find=find(copyOfList,x=>x.isCurrent))===null||_find===void 0?void 0:_find.list)||[];const[itemText,setItemText]=useState(text);const handleCheckboxChange=checkEvent=>{let updatedArray=currentListView;updatedArray=changeCheckedState(id,updatedArray,checkEvent);const updateCurrentState=updateLatestChangeToDoHistory(updatedArray,listHistoryState);setListHistoryState(updateCurrentState);};const handleOnInputBlur=()=>{if(isEmpty(itemText)){// PERFORM AN UNDO IF ITEM TEXT IS EMPTY\nconst undoHistoryState=moveCurrentState(listHistoryState);setListHistoryState([...undoHistoryState]);return;}const updatedArray=updateItemText(id,itemText,currentListView);const updateCurrentState=updateLatestChangeToDoHistory(updatedArray,listHistoryState);setListHistoryState(updateCurrentState);};const handleEnterKey=()=>{if(isEmpty(itemText)){// PERFORM AN UNDO IF ITEM TEXT IS EMPTY\nconst undoHistoryState=moveCurrentState(listHistoryState);setListHistoryState([...undoHistoryState]);return;}const updatedTextArray=updateItemText(id,itemText,currentListView);// update text item in history\nlet updateCurrentState=updateLatestChangeToDoHistory(updatedTextArray,listHistoryState);const updatedArrayWithNewItem=addNewItemToList(updatedTextArray);updateCurrentState=updateLatestChangeToDoHistory(updatedArrayWithNewItem,updateCurrentState,true);setListHistoryState(updateCurrentState);};function onStaticTextClick(){const updatedArray=changeEditMode(id,true,currentListView);const updateCurrentState=updateLatestChangeToDoHistory(updatedArray,listHistoryState,true);setListHistoryState(updateCurrentState);}const renderTextOrInput=()=>{return editMode?/*#__PURE__*/ /* RENDER INPUT */_jsx(\"input\",{id:\"text-input-\".concat(id),autoFocus:editMode,className:\"w-full active:w-full focus:text-yellow-950 pl-1\",placeholder:\"Type to-do item here\",type:\"text\",value:itemText,onChange:e=>setItemText(e.target.value),onBlur:()=>handleOnInputBlur(),onKeyDown:e=>{if(e.key==='Enter')handleEnterKey();}}):/*#__PURE__*/ /* RENDER STATIC TEXT */_jsx(\"div\",{className:\"cursor-pointer text-left text-wrap break-words\",onClick:()=>onStaticTextClick(),id:\"list-item-text-\".concat(id),children:text});};function onDeleteItem(){const updatedArray=deleteItem(id,currentListView);const updateCurrentState=updateLatestChangeToDoHistory(updatedArray,listHistoryState);setListHistoryState(updateCurrentState);}return/*#__PURE__*/_jsxs(\"div\",{className:classNames('flex w-full px-4 justify-between hover:bg-secondary-bg',{'line-through italic':checked,'':!checked}),id:\"list-item-\".concat(id),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex m-2\",id:\"checkbox-\".concat(id),children:[/*#__PURE__*/_jsx(\"label\",{id:\"label-\".concat(id),\"aria-label\":text}),/*#__PURE__*/_jsx(\"input\",{id:\"checkbox-\".concat(id),\"aria-label\":text,\"aria-labelledby\":\"label-\".concat(id),type:\"checkbox\",checked:checked,className:classNames('mr-2 w-[24px] h-[24px] min-w-[24px] min-h-[24px]',{'font-bold':checked,'font-light':!checked}),onChange:e=>handleCheckboxChange(!checked),onKeyDown:e=>{if(e.key==='Enter')handleCheckboxChange(!checked);}}),renderTextOrInput()]}),/*#__PURE__*/_jsx(\"div\",{className:\"items-end\",\"data-testid\":\"delete-icon\",id:\"to-do-delete-\".concat(id),children:/*#__PURE__*/_jsx(\"button\",{\"data-testid\":\"delete-item-icon\",id:\"delete-item-icon\",name:\"delete-item-icon\",type:\"button\",className:\"bold text-xl\",onClick:()=>onDeleteItem(),children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCircleMinus,className:\"pt-2\"})})})]});}export default ListItem;","map":{"version":3,"names":["React","useEffect","useState","addNewItemToList","changeCheckedState","changeEditMode","checkItem","deleteItem","moveCurrentState","unCheckItem","updateItemText","updateLatestChangeToDoHistory","find","isEmpty","classNames","FontAwesomeIcon","faCircleMinus","jsx","_jsx","jsxs","_jsxs","ListItem","_ref","_find","checked","editMode","id","listHistoryState","setListHistoryState","text","copyOfList","slice","currentListView","x","isCurrent","list","itemText","setItemText","handleCheckboxChange","checkEvent","updatedArray","updateCurrentState","handleOnInputBlur","undoHistoryState","handleEnterKey","updatedTextArray","updatedArrayWithNewItem","onStaticTextClick","renderTextOrInput","concat","autoFocus","className","placeholder","type","value","onChange","e","target","onBlur","onKeyDown","key","onClick","children","onDeleteItem","name","icon"],"sources":["C:/_projects/to-do-demo/src/components/atom/ListItem.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {\n    addNewItemToList, changeCheckedState,\n    changeEditMode,\n    checkItem,\n    deleteItem, moveCurrentState,\n    unCheckItem,\n    updateItemText,\n    updateLatestChangeToDoHistory\n} from \"../../utils/utils\";\nimport {find, isEmpty} from \"lodash\";\nimport classNames from \"classnames\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleMinus} from \"@fortawesome/free-solid-svg-icons\";\n// import {updateLatestChangeToDoHistory} from \"../../redux/actions\";\n// import {useDispatch} from \"react-redux\";\n\nfunction ListItem({\n    checked,\n    editMode,\n    id,\n    listHistoryState,\n    setListHistoryState,\n    text = ''\n  }) {\n    const copyOfList = listHistoryState.slice();\n    const currentListView = find(copyOfList, x => x.isCurrent)?.list || [];\n    const [itemText, setItemText] = useState(text);\n\n    const handleCheckboxChange = (checkEvent) => {\n        let updatedArray = currentListView;\n\n        updatedArray = changeCheckedState(id, updatedArray, checkEvent)\n\n        const updateCurrentState = updateLatestChangeToDoHistory(updatedArray, listHistoryState);\n        setListHistoryState(updateCurrentState);\n    }\n\n    const handleOnInputBlur = () => {\n        if(isEmpty(itemText)) {\n            // PERFORM AN UNDO IF ITEM TEXT IS EMPTY\n            const undoHistoryState = moveCurrentState(listHistoryState);\n            setListHistoryState([...undoHistoryState]);\n            return;\n        }\n\n        const updatedArray = updateItemText(id, itemText, currentListView);\n        const updateCurrentState = updateLatestChangeToDoHistory(updatedArray, listHistoryState);\n\n        setListHistoryState(updateCurrentState);\n    }\n\n    const handleEnterKey = () => {\n        if(isEmpty(itemText)) {\n            // PERFORM AN UNDO IF ITEM TEXT IS EMPTY\n            const undoHistoryState = moveCurrentState(listHistoryState);\n            setListHistoryState([...undoHistoryState]);\n            return;\n        }\n\n        const updatedTextArray = updateItemText(id, itemText, currentListView);\n\n        // update text item in history\n        let updateCurrentState = updateLatestChangeToDoHistory(updatedTextArray, listHistoryState);\n\n        const updatedArrayWithNewItem = addNewItemToList(updatedTextArray);\n\n        updateCurrentState = updateLatestChangeToDoHistory(updatedArrayWithNewItem, updateCurrentState, true);\n        setListHistoryState(updateCurrentState);\n    }\n\n    function onStaticTextClick() {\n        const updatedArray = changeEditMode(id, true, currentListView);\n        const updateCurrentState = updateLatestChangeToDoHistory(updatedArray, listHistoryState, true);\n\n        setListHistoryState(updateCurrentState);\n    }\n\n    const renderTextOrInput = () => {\n        return editMode ?\n        /* RENDER INPUT */\n        (<input\n            id={`text-input-${id}`}\n            autoFocus={editMode}\n            className='w-full active:w-full focus:text-yellow-950 pl-1'\n            placeholder=\"Type to-do item here\"\n            type=\"text\"\n            value={itemText}\n            onChange={(e) => setItemText(e.target.value)}\n            onBlur={() => handleOnInputBlur()}\n            onKeyDown={(e) => {\n                if (e.key === 'Enter') handleEnterKey()\n            }}\n        />) :\n            /* RENDER STATIC TEXT */\n            <div\n                className='cursor-pointer text-left text-wrap break-words'\n                onClick={() => onStaticTextClick()}\n                id={`list-item-text-${id}`}\n            >\n                {text}\n            </div>\n    }\n\n    function onDeleteItem() {\n        const updatedArray = deleteItem(id, currentListView);\n        const updateCurrentState = updateLatestChangeToDoHistory(updatedArray, listHistoryState);\n\n        setListHistoryState(updateCurrentState);\n    }\n\n    return (\n        <div className={\n            classNames('flex w-full px-4 justify-between hover:bg-secondary-bg',\n                {'line-through italic': checked, '': !checked})\n            }\n            id={`list-item-${id}`}\n        >\n            {/* LIST ITEM INPUT/TEXT ITEM */}\n            <div className='flex m-2' id={`checkbox-${id}`}>\n                <label id={`label-${id}`} aria-label={text}/>\n                <input\n                    id={`checkbox-${id}`}\n                    aria-label={text}\n                    aria-labelledby={`label-${id}`}\n                    type=\"checkbox\"\n                    checked={checked}\n                    className={classNames('mr-2 w-[24px] h-[24px] min-w-[24px] min-h-[24px]', {'font-bold': checked, 'font-light': !checked})}\n                    onChange={(e) => handleCheckboxChange(!checked)}\n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter') handleCheckboxChange(!checked);\n                    }}\n                />\n                {renderTextOrInput()}\n            </div>\n            {/* DELETE INDIVIDUAL ITEM BUTTON */}\n            <div className='items-end' data-testid='delete-icon' id={`to-do-delete-${id}`}>\n                <button\n                    data-testid='delete-item-icon'\n                    id='delete-item-icon'\n                    name='delete-item-icon'\n                    type='button'\n                    className='bold text-xl'\n                    onClick={()=> onDeleteItem()}\n                >\n                    <FontAwesomeIcon icon={faCircleMinus} className='pt-2' />\n                </button>\n            </div>\n        </div>\n    );\n}\n\nListItem.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    editMode: PropTypes.bool.isRequired,\n    id: PropTypes.string.isRequired,\n    listHistoryState:  PropTypes.arrayOf(PropTypes.shape({\n        isCurrent: PropTypes.bool,\n        list: PropTypes.arrayOf(PropTypes.shape({\n            checked: PropTypes.bool,\n            editMode: PropTypes.bool,\n            id: PropTypes.string,\n            text: PropTypes. string\n        }))\n    })).isRequired,\n    setListHistoryState: PropTypes.func.isRequired,\n    text: PropTypes.string\n};\n\nexport default ListItem;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}