{"ast":null,"code":"import{filter,findIndex,get,isEmpty,map,slice}from\"lodash\";import{v4 as uuidv4}from\"uuid\";import{IS_CURRENT,MAX_HISTORY}from\"./constants\";// TO-DO LIST UTILS:\nexport const limitListLength=(list,maxLength)=>{let updatedArray=list.slice();const numberOfItemsToRemove=list.length-maxLength;updatedArray=filter(updatedArray,(x,index)=>index>=numberOfItemsToRemove);return updatedArray;};export const changeEditMode=(itemId,editMode,list)=>{const indexOfItemToUpdate=findIndex(list,x=>x.id===itemId);const updatedObject=list[indexOfItemToUpdate];updatedObject.editMode=editMode;// this will mutate original list, but this is intentional. This will avoid adding more history to the list of changes\nreturn list;};export const updateItemText=(itemId,newText,list)=>{let updatedArray=slice(list);updatedArray=map(updatedArray,x=>{if(x.id===itemId){return{id:x.id,text:newText,editMode:false,checked:x.checked};}return{...x};});return updatedArray;};export const addNewItemToList=list=>{const updatedArray=slice(list);const newId=uuidv4();const emptyListItem={id:newId,text:\"\",editMode:true,checked:false};// set editMode to false for all items\nif(list.length>0)updatedArray.map(x=>x.editMode=false);// add new item\nupdatedArray.push(emptyListItem);return updatedArray;};export const changeCheckedState=(itemId,list,checked)=>{let updatedArray=slice(list);updatedArray=map(updatedArray,x=>{if(x.id===itemId){return{id:x.id,text:x.text,editMode:false,checked:checked};}return{...x};});return updatedArray;};export const deleteItem=(itemId,list)=>{let updatedArray=list.slice();updatedArray=filter(updatedArray,x=>!((x===null||x===void 0?void 0:x.id)===itemId));return updatedArray;};export const removeCheckedItems=list=>{const updatedArray=slice(list);return filter(updatedArray,item=>!(item!==null&&item!==void 0&&item.checked));};// HISTORY LIST STATE EDITS\nexport const clearIsCurrentProps=historyList=>{const updatedArray=slice(historyList);return map(updatedArray,x=>{x.isCurrent=false;return x;});};export const removeAllEditModeFromHistory=historyList=>{// filter main list by isInEditMode\nlet updatedArray=slice(historyList);updatedArray=filter(updatedArray,x=>!x.isInEditMode);// set all individual list items edit mode to false\nreturn map(updatedArray,x=>{if(isEmpty(x.list))return x;map(x.list,eachListItem=>{eachListItem.editMode=false;return eachListItem;});return x;});};export const moveCurrentState=function(historyList){let undo=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const updatedHistory=slice(historyList);const currentListIndex=findIndex(updatedHistory,x=>x.isCurrent===true);let newCurrentIndex=undo?currentListIndex-1:currentListIndex+1;clearIsCurrentProps(updatedHistory);updatedHistory[newCurrentIndex].isCurrent=true;return updatedHistory;};export const updateLatestChangeToDoHistory=function(newListItem,historyToUpdate){let editMode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let updatedHistory=historyToUpdate.slice();const newObject={[IS_CURRENT]:true,list:newListItem.slice(),isInEditMode:editMode};const currentListIndex=findIndex(updatedHistory,x=>x.isCurrent===true);const mostRecentListItem=updatedHistory[currentListIndex].list;//check if there is a change between previous state and new one\nif(JSON.stringify(newListItem)===JSON.stringify(mostRecentListItem))return updatedHistory;// remove the history that is after current state\nupdatedHistory.splice(currentListIndex+1);// return isCurrent as false for all\nif(updatedHistory.length>0)updatedHistory=clearIsCurrentProps(updatedHistory);// clear all edit states from history\nif(updatedHistory.length>0&&!editMode){updatedHistory=removeAllEditModeFromHistory(updatedHistory);}// set new item as latest change at end of list\nupdatedHistory.push(newObject);// ensure list is no longer than MAX_HISTORY steps long\nif(updatedHistory.length>MAX_HISTORY)updatedHistory=limitListLength(updatedHistory,MAX_HISTORY);return updatedHistory;};","map":{"version":3,"names":["filter","findIndex","get","isEmpty","map","slice","v4","uuidv4","IS_CURRENT","MAX_HISTORY","limitListLength","list","maxLength","updatedArray","numberOfItemsToRemove","length","x","index","changeEditMode","itemId","editMode","indexOfItemToUpdate","id","updatedObject","updateItemText","newText","text","checked","addNewItemToList","newId","emptyListItem","push","changeCheckedState","deleteItem","removeCheckedItems","item","clearIsCurrentProps","historyList","isCurrent","removeAllEditModeFromHistory","isInEditMode","eachListItem","moveCurrentState","undo","arguments","undefined","updatedHistory","currentListIndex","newCurrentIndex","updateLatestChangeToDoHistory","newListItem","historyToUpdate","newObject","mostRecentListItem","JSON","stringify","splice"],"sources":["C:/_projects/to-do-demo/src/utils/utils.js"],"sourcesContent":["import {filter, findIndex, get, isEmpty, map, slice} from \"lodash\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {IS_CURRENT, MAX_HISTORY} from \"./constants\";\n\n// TO-DO LIST UTILS:\nexport const limitListLength = (list, maxLength) => {\n    let updatedArray = list.slice();\n    const numberOfItemsToRemove = list.length - maxLength;\n    updatedArray = filter(updatedArray, (x, index) => index >= numberOfItemsToRemove);\n\n    return updatedArray;\n}\n\nexport const changeEditMode = (itemId, editMode, list) => {\n    const indexOfItemToUpdate = findIndex(list, x => x.id === itemId);\n    const updatedObject = list[indexOfItemToUpdate];\n\n    updatedObject.editMode = editMode; // this will mutate original list, but this is intentional. This will avoid adding more history to the list of changes\n\n    return list;\n}\n\nexport const updateItemText = (itemId, newText, list) => {\n    let updatedArray = slice(list);\n\n    updatedArray = map(updatedArray, x => {\n        if(x.id === itemId) {\n           return  {\n                id: x.id,\n                text: newText,\n                editMode: false,\n                checked: x.checked\n            }\n        }\n        return {...x};\n    })\n\n    return updatedArray;\n}\n\nexport const addNewItemToList = (list) => {\n    const updatedArray = slice(list);\n    const newId = uuidv4();\n    const emptyListItem = { id: newId, text: \"\", editMode: true, checked: false };\n\n    // set editMode to false for all items\n    if(list.length > 0) updatedArray.map(x => x.editMode = false);\n    // add new item\n    updatedArray.push(emptyListItem);\n\n    return updatedArray;\n}\n\nexport const changeCheckedState = (itemId, list, checked) => {\n    let updatedArray = slice(list);\n\n    updatedArray = map(updatedArray, x => {\n        if(x.id === itemId) {\n            return  {\n                id: x.id,\n                text: x.text,\n                editMode: false,\n                checked: checked\n            }\n        }\n        return {...x}\n    })\n    return updatedArray;\n}\n\nexport const deleteItem = (itemId, list) => {\n    let updatedArray = list.slice();\n    updatedArray = filter(updatedArray, x => !(x?.id === itemId));\n\n    return updatedArray;\n}\n\nexport const removeCheckedItems = (list) => {\n    const updatedArray = slice(list);\n    return filter(updatedArray, item => !item?.checked);\n}\n\n// HISTORY LIST STATE EDITS\nexport const clearIsCurrentProps = (historyList) => {\n    const updatedArray = slice(historyList);\n    return map(updatedArray, x => {\n        x.isCurrent = false\n        return x;\n    });\n}\n\nexport const removeAllEditModeFromHistory = (historyList) => {\n    // filter main list by isInEditMode\n    let updatedArray = slice(historyList);\n    updatedArray = filter(updatedArray, x => !x.isInEditMode);\n    // set all individual list items edit mode to false\n    return map(updatedArray, x => {\n        if(isEmpty(x.list)) return x;\n        map(x.list, eachListItem => {\n            eachListItem.editMode = false\n            return eachListItem;\n        })\n        return x;\n    })\n}\n\nexport const moveCurrentState = (historyList, undo = true) => {\n    const updatedHistory = slice(historyList);\n    const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n    let newCurrentIndex = undo ? currentListIndex - 1 : currentListIndex + 1;\n\n    clearIsCurrentProps(updatedHistory);\n\n    updatedHistory[newCurrentIndex].isCurrent = true;\n\n    return updatedHistory;\n}\n\nexport const updateLatestChangeToDoHistory = (newListItem, historyToUpdate, editMode = false) => {\n    let updatedHistory = historyToUpdate.slice();\n\n    const newObject = {[IS_CURRENT]: true, list: newListItem.slice(), isInEditMode: editMode};\n    const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n    const mostRecentListItem = updatedHistory[currentListIndex].list;\n\n    //check if there is a change between previous state and new one\n    if(JSON.stringify(newListItem) === JSON.stringify(mostRecentListItem)) return updatedHistory;\n\n    // remove the history that is after current state\n    updatedHistory.splice(currentListIndex + 1);\n\n    // return isCurrent as false for all\n    if(updatedHistory.length > 0) updatedHistory = clearIsCurrentProps(updatedHistory);\n    // clear all edit states from history\n    if(updatedHistory.length > 0 && !editMode) {\n        updatedHistory = removeAllEditModeFromHistory(updatedHistory);\n    }\n\n    // set new item as latest change at end of list\n    updatedHistory.push(newObject);\n    \n    // ensure list is no longer than MAX_HISTORY steps long\n    if(updatedHistory.length > MAX_HISTORY) updatedHistory = limitListLength(updatedHistory, MAX_HISTORY);\n\n    return updatedHistory;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}