{"ast":null,"code":"import { filter, findIndex, get, isEmpty, map, slice } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { IS_CURRENT, MAX_HISTORY } from \"./constants\";\n\n// TO-DO LIST UTILS:\nexport const limitListLength = (list, maxLength) => {\n  let updatedArray = list.slice();\n  const numberOfItemsToRemove = list.length - maxLength;\n  updatedArray = filter(updatedArray, (x, index) => index >= numberOfItemsToRemove);\n  return updatedArray;\n};\nexport const changeEditMode = (itemId, editMode, list) => {\n  const indexOfItemToUpdate = findIndex(list, x => x.id === itemId);\n  const updatedObject = list[indexOfItemToUpdate];\n  updatedObject.editMode = editMode; // this will mutate original list, but this is intentional. This will avoid adding more history to the list of changes\n\n  return list;\n};\nexport const updateItemText = (itemId, newText, list) => {\n  let updatedArray = slice(list);\n  updatedArray = map(updatedArray, x => {\n    if (x.id === itemId) {\n      return {\n        id: x.id,\n        text: newText,\n        editMode: false,\n        checked: x.checked\n      };\n    }\n    return {\n      ...x\n    };\n  });\n  return updatedArray;\n};\nexport const addNewItemToList = list => {\n  const updatedArray = slice(list);\n  const newId = uuidv4();\n  const emptyListItem = {\n    id: newId,\n    text: \"\",\n    editMode: true,\n    checked: false\n  };\n\n  // set editMode to false for all items\n  if (list.length > 0) updatedArray.map(x => x.editMode = false);\n  // add new item\n  updatedArray.push(emptyListItem);\n  return updatedArray;\n};\nexport const changeCheckedState = (itemId, list, checked) => {\n  let updatedArray = slice(list);\n  updatedArray = map(updatedArray, x => {\n    if (x.id === itemId) {\n      return {\n        id: x.id,\n        text: x.text,\n        editMode: false,\n        checked: checked\n      };\n    }\n    return {\n      ...x\n    };\n  });\n  return updatedArray;\n};\nexport const deleteItem = (itemId, list) => {\n  let updatedArray = list.slice();\n  updatedArray = filter(updatedArray, x => !((x === null || x === void 0 ? void 0 : x.id) === itemId));\n  return updatedArray;\n};\nexport const removeCheckedItems = list => {\n  const updatedArray = slice(list);\n  return filter(updatedArray, item => !(item !== null && item !== void 0 && item.checked));\n};\n\n// HISTORY LIST STATE EDITS\nexport const clearIsCurrentProps = historyList => {\n  const updatedArray = slice(historyList);\n  return map(updatedArray, x => {\n    x.isCurrent = false;\n    return x;\n  });\n};\nexport const removeAllEditModeFromHistory = historyList => {\n  // filter main list by isInEditMode\n  let updatedArray = slice(historyList);\n  updatedArray = filter(updatedArray, x => !x.isInEditMode);\n  // set all individual list items edit mode to false\n  return map(updatedArray, x => {\n    if (isEmpty(x.list)) return x;\n    map(x.list, eachListItem => {\n      eachListItem.editMode = false;\n      return eachListItem;\n    });\n    return x;\n  });\n};\nexport const moveCurrentState = (historyList, undo = true) => {\n  const updatedHistory = slice(historyList);\n  const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n  let newCurrentIndex = undo ? currentListIndex - 1 : currentListIndex + 1;\n  clearIsCurrentProps(updatedHistory);\n  updatedHistory[newCurrentIndex].isCurrent = true;\n  return updatedHistory;\n};\nexport const updateLatestChangeToDoHistory = (newListItem, historyToUpdate, editMode = false) => {\n  let updatedHistory = historyToUpdate.slice();\n  const newObject = {\n    [IS_CURRENT]: true,\n    list: newListItem.slice(),\n    isInEditMode: editMode\n  };\n  const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n  const mostRecentListItem = updatedHistory[currentListIndex].list;\n\n  //check if there is a change between previous state and new one\n  if (JSON.stringify(newListItem) === JSON.stringify(mostRecentListItem)) return updatedHistory;\n\n  // remove the history that is after current state\n  updatedHistory.splice(currentListIndex + 1);\n\n  // return isCurrent as false for all\n  if (updatedHistory.length > 0) updatedHistory = clearIsCurrentProps(updatedHistory);\n  // clear all edit states from history\n  if (updatedHistory.length > 0 && !editMode) {\n    updatedHistory = removeAllEditModeFromHistory(updatedHistory);\n  }\n\n  // set new item as latest change at end of list\n  updatedHistory.push(newObject);\n\n  // ensure list is no longer than MAX_HISTORY steps long\n  if (updatedHistory.length > MAX_HISTORY) updatedHistory = limitListLength(updatedHistory, MAX_HISTORY);\n  return updatedHistory;\n};","map":{"version":3,"names":["filter","findIndex","get","isEmpty","map","slice","v4","uuidv4","IS_CURRENT","MAX_HISTORY","limitListLength","list","maxLength","updatedArray","numberOfItemsToRemove","length","x","index","changeEditMode","itemId","editMode","indexOfItemToUpdate","id","updatedObject","updateItemText","newText","text","checked","addNewItemToList","newId","emptyListItem","push","changeCheckedState","deleteItem","removeCheckedItems","item","clearIsCurrentProps","historyList","isCurrent","removeAllEditModeFromHistory","isInEditMode","eachListItem","moveCurrentState","undo","updatedHistory","currentListIndex","newCurrentIndex","updateLatestChangeToDoHistory","newListItem","historyToUpdate","newObject","mostRecentListItem","JSON","stringify","splice"],"sources":["C:/_projects/to-do-demo/src/utils/utils.js"],"sourcesContent":["import {filter, findIndex, get, isEmpty, map, slice} from \"lodash\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {IS_CURRENT, MAX_HISTORY} from \"./constants\";\n\n// TO-DO LIST UTILS:\nexport const limitListLength = (list, maxLength) => {\n    let updatedArray = list.slice();\n    const numberOfItemsToRemove = list.length - maxLength;\n    updatedArray = filter(updatedArray, (x, index) => index >= numberOfItemsToRemove);\n\n    return updatedArray;\n}\n\nexport const changeEditMode = (itemId, editMode, list) => {\n    const indexOfItemToUpdate = findIndex(list, x => x.id === itemId);\n    const updatedObject = list[indexOfItemToUpdate];\n\n    updatedObject.editMode = editMode; // this will mutate original list, but this is intentional. This will avoid adding more history to the list of changes\n\n    return list;\n}\n\nexport const updateItemText = (itemId, newText, list) => {\n    let updatedArray = slice(list);\n\n    updatedArray = map(updatedArray, x => {\n        if(x.id === itemId) {\n           return  {\n                id: x.id,\n                text: newText,\n                editMode: false,\n                checked: x.checked\n            }\n        }\n        return {...x};\n    })\n\n    return updatedArray;\n}\n\nexport const addNewItemToList = (list) => {\n    const updatedArray = slice(list);\n    const newId = uuidv4();\n    const emptyListItem = { id: newId, text: \"\", editMode: true, checked: false };\n\n    // set editMode to false for all items\n    if(list.length > 0) updatedArray.map(x => x.editMode = false);\n    // add new item\n    updatedArray.push(emptyListItem);\n\n    return updatedArray;\n}\n\nexport const changeCheckedState = (itemId, list, checked) => {\n    let updatedArray = slice(list);\n\n    updatedArray = map(updatedArray, x => {\n        if(x.id === itemId) {\n            return  {\n                id: x.id,\n                text: x.text,\n                editMode: false,\n                checked: checked\n            }\n        }\n        return {...x}\n    })\n    return updatedArray;\n}\n\nexport const deleteItem = (itemId, list) => {\n    let updatedArray = list.slice();\n    updatedArray = filter(updatedArray, x => !(x?.id === itemId));\n\n    return updatedArray;\n}\n\nexport const removeCheckedItems = (list) => {\n    const updatedArray = slice(list);\n    return filter(updatedArray, item => !item?.checked);\n}\n\n// HISTORY LIST STATE EDITS\nexport const clearIsCurrentProps = (historyList) => {\n    const updatedArray = slice(historyList);\n    return map(updatedArray, x => {\n        x.isCurrent = false\n        return x;\n    });\n}\n\nexport const removeAllEditModeFromHistory = (historyList) => {\n    // filter main list by isInEditMode\n    let updatedArray = slice(historyList);\n    updatedArray = filter(updatedArray, x => !x.isInEditMode);\n    // set all individual list items edit mode to false\n    return map(updatedArray, x => {\n        if(isEmpty(x.list)) return x;\n        map(x.list, eachListItem => {\n            eachListItem.editMode = false\n            return eachListItem;\n        })\n        return x;\n    })\n}\n\nexport const moveCurrentState = (historyList, undo = true) => {\n    const updatedHistory = slice(historyList);\n    const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n    let newCurrentIndex = undo ? currentListIndex - 1 : currentListIndex + 1;\n\n    clearIsCurrentProps(updatedHistory);\n\n    updatedHistory[newCurrentIndex].isCurrent = true;\n\n    return updatedHistory;\n}\n\nexport const updateLatestChangeToDoHistory = (newListItem, historyToUpdate, editMode = false) => {\n    let updatedHistory = historyToUpdate.slice();\n\n    const newObject = {[IS_CURRENT]: true, list: newListItem.slice(), isInEditMode: editMode};\n    const currentListIndex = findIndex(updatedHistory, x => x.isCurrent === true);\n    const mostRecentListItem = updatedHistory[currentListIndex].list;\n\n    //check if there is a change between previous state and new one\n    if(JSON.stringify(newListItem) === JSON.stringify(mostRecentListItem)) return updatedHistory;\n\n    // remove the history that is after current state\n    updatedHistory.splice(currentListIndex + 1);\n\n    // return isCurrent as false for all\n    if(updatedHistory.length > 0) updatedHistory = clearIsCurrentProps(updatedHistory);\n    // clear all edit states from history\n    if(updatedHistory.length > 0 && !editMode) {\n        updatedHistory = removeAllEditModeFromHistory(updatedHistory);\n    }\n\n    // set new item as latest change at end of list\n    updatedHistory.push(newObject);\n    \n    // ensure list is no longer than MAX_HISTORY steps long\n    if(updatedHistory.length > MAX_HISTORY) updatedHistory = limitListLength(updatedHistory, MAX_HISTORY);\n\n    return updatedHistory;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}